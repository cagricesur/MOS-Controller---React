// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MC.Data.Entities;

public partial class CCSQLContext : DbContext
{
    public CCSQLContext(DbContextOptions<CCSQLContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Config> Config { get; set; }

    public virtual DbSet<Menu> Menu { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<State> State { get; set; }

    public virtual DbSet<StateColumn> StateColumn { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<UserPassword> UserPassword { get; set; }

    public virtual DbSet<UserRole> UserRole { get; set; }

    public virtual DbSet<UserStatus> UserStatus { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Config>(entity =>
        {
            entity.ToTable("Config", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Key)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.ToTable("Menu", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Icon)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Path)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Roles)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.ToTable("Resource", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Key)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.Value).IsRequired();
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.ToTable("State", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(100);
        });

        modelBuilder.Entity<StateColumn>(entity =>
        {
            entity.ToTable("StateColumn", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Caption)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.State).WithMany(p => p.StateColumn)
                .HasForeignKey(d => d.StateID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StateColumn_State");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserPassword>(entity =>
        {
            entity.ToTable("UserPassword", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.UserPassword)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPassword_User");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.ToTable("UserRole", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithMany(p => p.UserRole)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_User");
        });

        modelBuilder.Entity<UserStatus>(entity =>
        {
            entity.ToTable("UserStatus", "MC");

            entity.Property(e => e.ID).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithMany(p => p.UserStatus)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserStatus_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}